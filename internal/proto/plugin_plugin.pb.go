//go:build tinygo.wasm

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin 0.8.0
// 	protoc               v5.28.0
// source: plugin.proto

package proto

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	wasm "github.com/knqyf263/go-plugin/wasm"
	_ "unsafe"
)

const PluginPluginAPIVersion = 1

//export plugin_api_version
func _plugin_api_version() uint64 {
	return PluginPluginAPIVersion
}

var plugin Plugin

func RegisterPlugin(p Plugin) {
	plugin = p
}

//export plugin_handle
func _plugin_handle(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(Event)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := plugin.Handle(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type hostFunctions struct{}

func NewHostFunctions() HostFunctions {
	return hostFunctions{}
}

//go:wasm-module env
//export logger
//go:linkname _logger
func _logger(ptr uint32, size uint32) uint64

func (h hostFunctions) Logger(ctx context.Context, request *Message) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _logger(ptr, size)
	wasm.FreePtr(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}
